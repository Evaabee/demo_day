{"ast":null,"code":"var _jsxFileName = \"/Users/legitevaa/Desktop/Activity_9/frontend/src/components/NotificationForm.js\",\n  _s = $RefreshSig$();\n// frontend/src/components/NotificationForm.js\nimport React, { useState } from 'react';\nimport './NotificationForm.css';\nimport Button from './Button';\nimport Dropdown from './Dropdown';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationForm = ({\n  onSubmit,\n  cryptocurrencies\n}) => {\n  _s();\n  var _cryptocurrencies$;\n  const [selectedCrypto, setSelectedCrypto] = useState(((_cryptocurrencies$ = cryptocurrencies[0]) === null || _cryptocurrencies$ === void 0 ? void 0 : _cryptocurrencies$.id) || '');\n  const [notificationType, setNotificationType] = useState('Price');\n  const [thresholdValue, setThresholdValue] = useState('');\n  const [notificationMethod, setNotificationMethod] = useState('Email');\n  const [userId, setUserId] = useState(1); // For simplicity, using a hardcoded user ID\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const API_URL = process.env.REACT_APP_API_URL || 'http://127.0.0.1:8000';\n  const handleSetAlert = async () => {\n    if (!thresholdValue) {\n      setError('Threshold value is required.');\n      return;\n    }\n    const alertData = {\n      user_id: userId,\n      crypto_id: selectedCrypto,\n      threshold_price: parseFloat(thresholdValue),\n      notification_method: notificationMethod\n    };\n    setLoading(true);\n    try {\n      const response = await axios.post(`${API_URL}/alerts/`, alertData);\n      console.log('Alert created:', response.data);\n      onSubmit(alertData);\n      setError(null);\n    } catch (err) {\n      console.error('Error setting alert:', err);\n      setError('Setting alerts is not available at the moment.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const selectedCryptoDetails = cryptocurrencies.find(crypto => crypto.id === selectedCrypto);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"notification-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Set Notification\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n      label: \"Select Cryptocurrency:\",\n      options: cryptocurrencies.map(crypto => ({\n        value: crypto.id,\n        label: crypto.name\n      })),\n      onSelect: setSelectedCrypto,\n      selectedValue: selectedCrypto\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), selectedCryptoDetails && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"crypto-details\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Market Cap: $\", selectedCryptoDetails.market_cap.toLocaleString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Hourly Price: $\", selectedCryptoDetails.hourly_price]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Hourly Percentage Change: \", selectedCryptoDetails.hourly_percentage, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Last Updated: \", new Date(selectedCryptoDetails.time_updated).toLocaleString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n      label: \"Get notified by change in:\",\n      options: [{\n        value: 'Price',\n        label: 'Price'\n      }, {\n        value: 'Percentage',\n        label: 'Percentage'\n      }],\n      onSelect: setNotificationType,\n      selectedValue: notificationType\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Set Threshold\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: thresholdValue,\n        onChange: e => setThresholdValue(e.target.value),\n        step: \"any\",\n        placeholder: \"Enter threshold value\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n      label: \"Notification Method\",\n      options: [{\n        value: 'Email',\n        label: 'Email'\n      }, {\n        value: 'SMS',\n        label: 'SMS'\n      }, {\n        value: 'Phone Call',\n        label: 'Phone Call'\n      }, {\n        value: 'Whatsapp',\n        label: 'Whatsapp'\n      }, {\n        value: 'Slack',\n        label: 'Slack'\n      }, {\n        value: 'Discord',\n        label: 'Discord'\n      }],\n      onSelect: setNotificationMethod,\n      selectedValue: notificationMethod\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      text: loading ? 'Setting Alert...' : 'Set Alert!',\n      onClick: handleSetAlert,\n      disabled: loading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(NotificationForm, \"OWSOpI6ZxtzS5uacNRi7l0Ir8oc=\");\n_c = NotificationForm;\nexport default NotificationForm;\nvar _c;\n$RefreshReg$(_c, \"NotificationForm\");","map":{"version":3,"names":["React","useState","Button","Dropdown","axios","jsxDEV","_jsxDEV","NotificationForm","onSubmit","cryptocurrencies","_s","_cryptocurrencies$","selectedCrypto","setSelectedCrypto","id","notificationType","setNotificationType","thresholdValue","setThresholdValue","notificationMethod","setNotificationMethod","userId","setUserId","loading","setLoading","error","setError","API_URL","process","env","REACT_APP_API_URL","handleSetAlert","alertData","user_id","crypto_id","threshold_price","parseFloat","notification_method","response","post","console","log","data","err","selectedCryptoDetails","find","crypto","className","children","fileName","_jsxFileName","lineNumber","columnNumber","label","options","map","value","name","onSelect","selectedValue","market_cap","toLocaleString","hourly_price","hourly_percentage","Date","time_updated","type","onChange","e","target","step","placeholder","style","color","text","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/legitevaa/Desktop/Activity_9/frontend/src/components/NotificationForm.js"],"sourcesContent":["// frontend/src/components/NotificationForm.js\nimport React, { useState } from 'react';\nimport './NotificationForm.css';\nimport Button from './Button';\nimport Dropdown from './Dropdown';\nimport axios from 'axios';\n\nconst NotificationForm = ({ onSubmit, cryptocurrencies }) => {\n  const [selectedCrypto, setSelectedCrypto] = useState(cryptocurrencies[0]?.id || '');\n  const [notificationType, setNotificationType] = useState('Price');\n  const [thresholdValue, setThresholdValue] = useState('');\n  const [notificationMethod, setNotificationMethod] = useState('Email');\n  const [userId, setUserId] = useState(1); // For simplicity, using a hardcoded user ID\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const API_URL = process.env.REACT_APP_API_URL || 'http://127.0.0.1:8000';\n\n  const handleSetAlert = async () => {\n    if (!thresholdValue) {\n      setError('Threshold value is required.');\n      return;\n    }\n\n    const alertData = {\n      user_id: userId,\n      crypto_id: selectedCrypto,\n      threshold_price: parseFloat(thresholdValue),\n      notification_method: notificationMethod,\n    };\n\n    setLoading(true);\n    try {\n      const response = await axios.post(`${API_URL}/alerts/`, alertData);\n      console.log('Alert created:', response.data);\n      onSubmit(alertData);\n      setError(null);\n    } catch (err) {\n      console.error('Error setting alert:', err);\n      setError('Setting alerts is not available at the moment.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const selectedCryptoDetails = cryptocurrencies.find(\n    (crypto) => crypto.id === selectedCrypto\n  );\n\n  return (\n    <div className=\"notification-form\">\n      <h2>Set Notification</h2>\n\n      {/* Dropdown for Cryptocurrency Selection */}\n      <Dropdown\n        label=\"Select Cryptocurrency:\"\n        options={cryptocurrencies.map((crypto) => ({\n          value: crypto.id,\n          label: crypto.name,\n        }))}\n        onSelect={setSelectedCrypto}\n        selectedValue={selectedCrypto}\n      />\n\n      {/* Display Selected Cryptocurrency Details */}\n      {selectedCryptoDetails && (\n        <div className=\"crypto-details\">\n          <p>Market Cap: ${selectedCryptoDetails.market_cap.toLocaleString()}</p>\n          <p>Hourly Price: ${selectedCryptoDetails.hourly_price}</p>\n          <p>Hourly Percentage Change: {selectedCryptoDetails.hourly_percentage}%</p>\n          <p>Last Updated: {new Date(selectedCryptoDetails.time_updated).toLocaleString()}</p>\n        </div>\n      )}\n\n      {/* Dropdown for Notification Type */}\n      <Dropdown\n        label=\"Get notified by change in:\"\n        options={[\n          { value: 'Price', label: 'Price' },\n          { value: 'Percentage', label: 'Percentage' },\n        ]}\n        onSelect={setNotificationType}\n        selectedValue={notificationType}\n      />\n\n      {/* Input for Threshold */}\n      <div className=\"input-group\">\n        <label>Set Threshold</label>\n        <input\n          type=\"number\"\n          value={thresholdValue}\n          onChange={(e) => setThresholdValue(e.target.value)}\n          step=\"any\"\n          placeholder=\"Enter threshold value\"\n        />\n      </div>\n\n      {/* Dropdown for Notification Method */}\n      <Dropdown\n        label=\"Notification Method\"\n        options={[\n          { value: 'Email', label: 'Email' },\n          { value: 'SMS', label: 'SMS' },\n          { value: 'Phone Call', label: 'Phone Call' },\n          { value: 'Whatsapp', label: 'Whatsapp' },\n          { value: 'Slack', label: 'Slack' },\n          { value: 'Discord', label: 'Discord' },\n        ]}\n        onSelect={setNotificationMethod}\n        selectedValue={notificationMethod}\n      />\n\n      {error && <p style={{ color: 'red' }}>{error}</p>}\n\n      <Button\n        text={loading ? 'Setting Alert...' : 'Set Alert!'}\n        onClick={handleSetAlert}\n        disabled={loading}\n      />\n    </div>\n  );\n};\n\nexport default NotificationForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}